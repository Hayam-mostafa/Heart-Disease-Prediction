# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u5LZeUjumBD1qiaSvJu2u3GrJGOzuMB5
"""

!pip install ucimlrepo
!pip install streamlit
!pip install pyngrok

import numpy as np
import pandas as pd
from ucimlrepo import fetch_ucirepo
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

heart_disease = fetch_ucirepo(id=45)

X = heart_disease.data.features
y = heart_disease.data.targets

from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier

num_cols = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']
cat_cols = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal']

# Preprocessing
preprocessor = ColumnTransformer([
    ('num', StandardScaler(), num_cols),
    ('cat', OneHotEncoder(handle_unknown='ignore'), cat_cols)
])

pipe = Pipeline([
    ('preprocessing', preprocessor),
    ('classifier', RandomForestClassifier())
])

pipe.fit(X, y)
import joblib
joblib.dump(pipe, 'heart_disease_rf_pipeline.pkl')

# Commented out IPython magic to ensure Python compatibility.
# 
# %%writefile app.py
# import joblib
# import streamlit as st
# import pandas as pd
# 
# # Load trained pipeline model
# model = joblib.load("heart_disease_rf_pipeline.pkl")
# 
# st.title("❤️ Heart Disease Prediction App")
# st.write("Enter your health data to check your risk of heart disease.")
# 
# # User Inputs
# age = st.slider("Age", 20, 100, 50)
# sex = st.selectbox("Sex", ["Male", "Female"])
# cp = st.selectbox("Chest Pain Type (cp)", [0, 1, 2, 3])
# trestbps = st.slider("Resting Blood Pressure", 80, 200, 120)
# chol = st.slider("Serum Cholesterol", 100, 600, 200)
# fbs = st.selectbox("Fasting Blood Sugar > 120", [0, 1])
# restecg = st.selectbox("Resting ECG", [0, 1, 2])
# thalach = st.slider("Max Heart Rate", 70, 210, 150)
# exang = st.selectbox("Exercise-Induced Angina", [0, 1])
# oldpeak = st.slider("ST Depression", 0.0, 6.0, 1.0)
# slope = st.selectbox("Slope", [0, 1, 2])
# ca = st.slider("Number of Major Vessels", 0, 4, 0)
# thal = st.selectbox("Thal", [0, 1, 2, 3])
# 
# # Encode sex
# sex = 1 if sex == "Male" else 0
# 
# # Create raw input without any transformation
# user_input = pd.DataFrame({
#     "age": [age],
#     "sex": [sex],
#     "cp": [cp],
#     "trestbps": [trestbps],
#     "chol": [chol],
#     "fbs": [fbs],
#     "restecg": [restecg],
#     "thalach": [thalach],
#     "exang": [exang],
#     "oldpeak": [oldpeak],
#     "slope": [slope],
#     "ca": [ca],
#     "thal": [thal],
# })
# 
# # Predict using full pipeline (which handles preprocessing)
# if st.button("Predict"):
#     prediction = model.predict(user_input)[0]
#     if prediction == 1:
#         st.error("⚠️ Likely to have Heart Disease")
#     else:
#         st.success("✅ Unlikely to have Heart Disease")

from google.colab import files
from pyngrok import conf, ngrok
import time # Import the time module

uploaded = files.upload()
conf.get_default().auth_token ="30U2HAlJQbZebe7blq2x3NNyeJT_23d7hk7aPcVwQEHGzeeLf"

# Terminate any active ngrok tunnels in this session
ngrok.kill()
time.sleep(5) # Add a short delay

# Run Streamlit
!streamlit run app.py &> streamlit.log &

# Create tunnel
public_url = ngrok.connect(addr=8501, proto='http')
print("Streamlit App URL:", public_url)

